# -*- coding: utf-8 -*-
"""Computer security project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Omcgb6sFf4pffEUaF9H_ds5iBKA_4lx
"""

pip install cryptography

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import serialization


# Generate RSA key pair
private_key = rsa.generate_private_key(   #function generates an RSA private key
    public_exponent=65537,  #public exponent used in the RSA algorithm
    key_size=2048,  #specifies the size of the RSA key in bits
    backend=default_backend()  # specifies the backend library used for generating the key
)
public_key = private_key.public_key()  #to extract the public key from the generated private key, making it available for encryption and signature verification purposes.

# Save the private key securely
private_pem = private_key.private_bytes(  #converting the private key to a PEM=Privacy-Enhanced Mail format
    encoding=serialization.Encoding.PEM,                 # Encode in PEM format
    format=serialization.PrivateFormat.TraditionalOpenSSL,  # Use OpenSSL's traditional private key format
    encryption_algorithm=serialization.NoEncryption()    # No encryption applied to the private key
)
with open("private_key.pem", "wb") as private_key_file:
    private_key_file.write(private_pem) #holds the PEM-encoded private key

# Save the public key
public_pem = public_key.public_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PublicFormat.SubjectPublicKeyInfo
)
with open("public_key.pem", "wb") as public_key_file:
    public_key_file.write(public_pem)

# Encrypt the file using Fernet symmetric encryption (Fernet used Advanced Encryption Standard(AES))

encryption_key = Fernet.generate_key()# Generate a symmetric encryption key using Fernet
cipher_suite = Fernet(encryption_key)# Create a Fernet cipher suite using the generated encryption key
with open("secret.txt", "rb") as file:# Open and read the plaintext file to be encrypted
    plaintext = file.read()
cipher_text = cipher_suite.encrypt(plaintext)# Encrypt the plaintext using the Fernet cipher suite



# Create a digital signature
signature = private_key.sign(
    cipher_text,
    padding.PSS(
        mgf=padding.MGF1(hashes.SHA256()),
        salt_length=padding.PSS.MAX_LENGTH
    ),
    hashes.SHA256()
)

# Save the encrypted file and the signature
with open("encrypted_secret.txt", "wb") as file:
    file.write(cipher_text)

with open("signature.txt", "wb") as file:
    file.write(signature)

# Load the received public key
with open("public_key.pem", "rb") as public_key_file:
    # Load the PEM-encoded public key from the file
    received_public_key = serialization.load_pem_public_key(
        public_key_file.read(),
        backend=default_backend()
    )

# Load the received files
with open("encrypted_secret.txt", "rb") as file:
    # Read the encrypted data from the file
    received_cipher_text = file.read()

with open("signature.txt", "rb") as file:
    # Read the received digital signature from the file
    received_signature = file.read()

# Verify the signature
try:
    # Verify the received signature using the loaded public key
    received_public_key.verify(
    received_signature,                                  # The received digital signature
    received_cipher_text,                                # The received encrypted data
    padding.PSS(
        mgf=padding.MGF1(hashes.SHA256()),                # Mask Generation Function using SHA-256
        salt_length=padding.PSS.MAX_LENGTH               # Maximum salt length for PSS padding
    ),
    hashes.SHA256()                                      # Hash algorithm used in the signature
)

    # If verification succeeds, the signature is authentic
    print("Signature verified. The file is authentic.")
except:
    # If verification fails, the signature or data may be tampered with
    print("Signature verification failed. The file may have been tampered with.")

# Decrypt the file using the shared encryption key
received_plaintext = cipher_suite.decrypt(received_cipher_text)

# Save the decrypted content to a file
with open("received_secret.txt", "wb") as file:
    # Write the decrypted data to the "received_secret.txt" file
    file.write(received_plaintext)